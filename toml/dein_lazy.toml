[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_leader_key=','
'''
on_ft = ['html', 'xml', 'vue', 'htmldjango']
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''
  let g:tex_flavor = 'latex'
  let g:tex_conceal = 'abdmg'
  let g:vimtex_fold_enabled = 1
  let g:vimtex_view_method='zathura'
  let g:vimtex_quickfix_enabled=0
  let g:vimtex_quickfix_mode = 0
  let g:vimtex_fold_manual = 1
  " Do below if using treesitter
  " let g:vimtex_syntax_enabled = 0
  " let g:vimtex_syntax_conceal_disable = 1
'''

[[plugins]]
repo = 'AtsushiM/search-parent.vim'
on_ft = ['sass','scss','css']
[[plugins]]
repo = 'akiyan/vim-textobj-php'
on_ft = ['html','htm']
[[plugins]]
repo = 'wokalski/autocomplete-flow'
on_ft = ['html', 'htm', 'js']
[[plugins]]
repo = 'zeekay/vim-beautify'
on_ft = ['html', 'htm', 'js']
[[plugins]]
repo = 'AtsushiM/sass-compile.vim'
on_ft = ['sass','scss']
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
[[plugins]]
repo = 'luochen1990/rainbow'
on_ft = ['lisp']

# align
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga  <Plug>(EasyAlign)
'''
on_map = '<Plug>(EasyAlign)'

# paren closing completion
[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_ft = ['css', 'vim', 'markdown']
hook_post_source = '''
luado require 'colorizer'.setup()
ColorizerAttachToBuffer " Attach to the current buffer
'''
depends = 'impatient.nvim'

[[plugins]]
repo = 'tpope/vim-dispatch'
on_map = '<Cmd>Dispatch!'

[[plugins]]
repo = 'bps/vim-textobj-python'
hook_add = '''
let g:textobj_python_no_default_key_mappings = 1
'''
hook_post_source = 'call Textobjpython_postsource()'
on_ft = 'python'


[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'typescript']
[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

# :Gbrowse to open github
[[plugins]]
repo = 'tpope/vim-rhubarb'
on_cmd='GBrowse'
on_ft = 'gitcommit'
depends = 'vim-fugitive'

# :SpellCheck to put spell errors to quickfix
# [[plugins]]
# repo = 'https://github.com/inkarkat/vim-SpellCheck'
# [[plugins]]
# repo = 'https://github.com/inkarkat/vim-ingo-library'

# :HelpfulVersion to view version
[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd='HelpfulVersion'

# commenter
[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign='left'
let g:NERDCustomDelimiters = {'vim': {'left': '"','right':''}}
noremap <C-_> <Plug>NERDCommenterToggle
'''
on_event = 'VimEnter'

# LuaSnip and snippet list
[[plugins]]
repo = 'https://github.com/L3MON4D3/LuaSnip'
hook_source = '''
" press <Tab> to expand or jump in a snippet. These can also be mapped separately
" via <Plug>luasnip-expand-snippet and <Plug>luasnip-jump-next.
imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 
" -1 for jumping backwards.
inoremap <silent> <S-Tab> <cmd>lua require'luasnip'.jump(-1)<Cr>

snoremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>

" For changing choices in choiceNodes (not strictly necessary for a basic setup).
imap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'
smap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'

exe 'source' stdpath('config') . '/toml/luasnip.lua'
'''
on_event = 'InsertEnter'
depends = ['luasnip-latex-snippets.nvim','impatient.nvim']

[[plugins]]
repo = 'iurimateus/luasnip-latex-snippets.nvim'
hook_source = '''
lua require'luasnip-latex-snippets'.setup()
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = 'call Fzf_add()'
on_cmd = ['Files', 'Buffers', 'History', 'Maps', 'Helptags', 'Tags', 'Rg']
depends = 'fzf'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = 'call Gitgutter_add()'
on_map = '<Plug>(GitGutter'
on_event = 'BufRead'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = 'call Fugitive_add()'
on_cmd = ['Git', 'Gwrite', '0Gclog', 'Gdiffsplit', 'Glgrep']

# indentline implementation in lua
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
lua_post_source = '''
require("indent_blankline").setup {
    space_char_blankline = " ",
    char_highlight_list = {
        "IndentBlanklineIndent",
    },
}
'''
on_event = 'BufRead'
depends = 'impatient.nvim'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_sort = 0
let g:tagbar_autoclose = 0
'''
on_cmd = 'TagbarToggle'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
nnoremap U :UndotreeToggle<CR>
'''
on_cmd = 'UndotreeToggle'

[[plugins]]
repo = 'jpalardy/vim-slime'
hook_add = '''
nmap <c-c><c-c> <Plug>SlimeParagraphSend
nmap <c-c><c-n> <Plug>SlimeParagraphSend}/[^\n]<CR>
nmap <c-c><c-p> <Plug>SlimeParagraphSend{?[^\n]<CR>
'''
on_map = '<Plug>Slime'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_bell = 1
let g:asyncrun_open = 8
'''
on_cmd = 'AsyncRun'

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
nnoremap <leader>gl <Cmd>Agit<CR>
'''
hook_post_source = '''
hi link agitStatAdded diffAdded
hi link agitStatRemoved diffRemoved
hi link agitDiffAdd diffAdded
hi link agitDiffRemove diffRemoved
'''
on_cmd = 'Agit'

[[plugins]]
repo = 'voldikss/vim-floaterm.git'
hook_add = '''
let g:floaterm_width=0.9
let g:floaterm_height=0.9
nnoremap <Plug>(my-win)z <Cmd>FloatermToggle<CR>
tnoremap <silent> <C-[> <C-\><C-n>:FloatermHide<CR>
tnoremap <silent> <C-l> <C-\><C-n>
'''
on_cmd = 'FloatermToggle'


[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
lua_post_source = '''
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = {'diff', 'org'},
    disable = {'json', 'diff', 'latex'},
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "M",
      node_incremental = "M",
      scope_incremental = "S",
      node_decremental = "m",
    },
  },
  indent = {
    enable = false
  },
  auto_install = true,
}
'''
hook_done_update = 'TSUpdate'
on_event = 'BufRead'
depends = 'impatient.nvim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
hook_post_source = 'lua require"treesitter-context".setup()'
depends = 'nvim-treesitter'
on_event = 'InsertEnter'

# LSP configuration
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'

[[plugins]]
repo='williamboman/mason.nvim'
hook_post_source='''
lua require("mason").setup()
'''
depends = 'impatient.nvim'

[[plugins]]
repo='williamboman/mason-lspconfig.nvim'
lua_post_source='''
require("mason-lspconfig").setup{
    ensure_installed = { "sumneko_lua", "rust_analyzer", "pyright", "vimls", "bashls", "clangd", 'texlab'}
}
'''
depends = ['mason.nvim', 'nvim-lspconfig']
on_event = 'BufRead'

# color picker
[[plugins]]
repo = 'https://github.com/uga-rosa/ccc.nvim'
on_cmd = 'Ccc'
depends = 'impatient.nvim'

[[plugins]]
repo = 'tversteeg/registers.nvim'
hook_post_source = '''lua require("registers").setup()'''
on_event = 'BufRead'
depends = 'impatient.nvim'

[[plugins]]
repo = 'https://github.com/nvim-orgmode/orgmode'
lua_post_source = '''
-- Load custom treesitter grammar for org filetype
require('orgmode').setup_ts_grammar()

require('orgmode').setup({
  org_agenda_files = {'~/org/*'},
  org_default_notes_file = '~/org/refile.org',
})
'''
hook_post_source = '''
augroup org-mode
    autocmd FileType org nnoremap <buffer> + <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> t <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> - <Cmd>lua require("orgmode").action("org_mappings.todo_prev_state")<CR>
augroup END
'''
on_event = 'BufRead'
depends = 'nvim-treesitter'
