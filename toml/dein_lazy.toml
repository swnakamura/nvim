[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_leader_key=','
'''
on_ft = ['html', 'xml', 'vue', 'htmldjango']
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = 'call Vimtex_add()'
[[plugins]]
repo = 'AtsushiM/search-parent.vim'
on_ft = ['sass','scss','css']
[[plugins]]
repo = 'akiyan/vim-textobj-php'
on_ft = ['html','htm']
[[plugins]]
repo = 'tpope/vim-surround'
on_ft = ['html','htm']
[[plugins]]
repo = 'wokalski/autocomplete-flow'
on_ft = ['html', 'htm', 'js']
[[plugins]]
repo = 'zeekay/vim-beautify'
on_ft = ['html', 'htm', 'js']
[[plugins]]
repo = 'AtsushiM/sass-compile.vim'
on_ft = ['sass','scss']
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
[[plugins]]
repo = 'luochen1990/rainbow'
on_ft = ['lisp']

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-path'
[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
depends = ['nvim-lspconfig', 'cmp-nvim-lsp', 'cmp-buffer', 'cmp-path', 'cmp-cmdline', 'cmp-nvim-ultisnips' ]
on_event = ['InsertEnter', 'CmdlineEnter']
hook_post_source = '''
set completeopt=menu,menuone,noselect

lua <<EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['pyright'].setup {
  }
EOF
'''

# align
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga  <Plug>(EasyAlign)
'''
on_map = '<Plug>(EasyAlign)'

# paren closing completion
[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_ft = ['css', 'vim', 'markdown']
hook_post_source = '''
luado require 'colorizer'.setup()
ColorizerAttachToBuffer " Attach to the current buffer
'''

# LSP configuration
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['c', 'cpp', 'rust', 'python', 'vim', 'tex', 'javascript', 'typescript']
depends = 'lsp_signature.nvim'
hook_post_source = '''
if !exists('g:vscode')
    exe 'source' g:nvim_home_directory .. 'rcs/lsp.vim'
endif
LspStart
'''
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

[[plugins]]
repo = 'tpope/vim-dispatch'
on_map = '<Cmd>Dispatch!'

[[plugins]]
repo = 'bps/vim-textobj-python'
hook_add = '''
let g:textobj_python_no_default_key_mappings = 1
'''
hook_post_source = 'call Textobjpython_postsource()'
on_ft = 'python'


[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'typescript']
[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'
