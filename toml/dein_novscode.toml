# Ultisnip and snippet list
[[plugins]]
repo = 'https://github.com/L3MON4D3/LuaSnip'
hook_add = '''
" press <Tab> to expand or jump in a snippet. These can also be mapped separately
" via <Plug>luasnip-expand-snippet and <Plug>luasnip-jump-next.
imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 
" -1 for jumping backwards.
inoremap <silent> <S-Tab> <cmd>lua require'luasnip'.jump(-1)<Cr>

snoremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>

" For changing choices in choiceNodes (not strictly necessary for a basic setup).
imap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'
smap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'

exe 'source' $HOME . '/.config/nvim/toml/luasnip.lua'
'''
[[plugins]]
repo = 'https://github.com/iurimateus/luasnip-latex-snippets.nvim'
hook_add = '''
lua require'luasnip-latex-snippets'.setup({use_treesitter = true})
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
hook_install = 'fzf#install()'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = 'call Fzf_add()'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = 'call Gitgutter_add()'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = 'call Fugitive_add()'

# indentline implementation in lua
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_sort = 0
let g:tagbar_autoclose = 0
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
nnoremap U :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'call Lightline_add()'

[[plugins]]
repo = 'jpalardy/vim-slime'
hook_add = '''
nmap <c-c><c-c> <Plug>SlimeParagraphSend
nmap <c-c><c-n> <Plug>SlimeParagraphSend}/[^\n]<CR>
nmap <c-c><c-p> <Plug>SlimeParagraphSend{?[^\n]<CR>
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_bell = 1
let g:asyncrun_open = 8
'''

[[plugins]]
repo = 'woodyZootopia/gitsession.vim'
hook_add = '''
let g:gitsession_autosave = 1
let g:gitsession_tmp_dir = g:nvim_home_directory .. '/tmp/gitsession'
'''

# [[plugins]]
# repo = 'LeafCage/vimhelpgenerator.git'

[[plugins]]
repo = 'tversteeg/registers.nvim'

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
# [[plugins]]
# repo = 'cocopon/pgmnt.vim'
# [[plugins]]
# repo = 'cocopon/inspecthi.vim'
# [[plugins]]
# repo = 'cocopon/colorswatch.vim'

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
hook_post_source = '''
let g:dps_ghosttext#ftmap['www.overleaf.com']='tex'
let g:dps_ghosttext#ftmap['localhost:8888']='python'
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
nnoremap <leader>gl <Cmd>Agit<CR>
'''
hook_post_source = '''
hi link agitStatAdded diffAdded
hi link agitStatRemoved diffRemoved
hi link agitDiffAdd diffAdded
hi link agitDiffRemove diffRemoved
'''

[[plugins]]
repo = 'voldikss/vim-floaterm.git'
hook_add = '''
let g:floaterm_width=0.9
let g:floaterm_height=0.9
nnoremap <Plug>(my-win)z :<C-u>ContextDisable<CR>:FloatermToggle<CR>
tnoremap <silent> <C-[> <C-\><C-n>:FloatermToggle<CR>:ContextEnable<CR>
tnoremap <silent> <C-l> <C-\><C-n>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
hook_post_source = 'call Treesitter_postsource()'
hook_install = 'TSUpdate'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'https://github.com/nvim-orgmode/orgmode'
hook_post_source = '''
lua <<EOF
-- Load custom tree-sitter grammar for org filetype
require('orgmode').setup_ts_grammar()

require('orgmode').setup({
  org_agenda_files = {'~/org/*'},
  org_default_notes_file = '~/org/refile.org',
})
EOF
augroup org-mode
    autocmd FileType org nnoremap <buffer> + <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> t <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> - <Cmd>lua require("orgmode").action("org_mappings.todo_prev_state")<CR>
augroup END
'''
[[plugins]]
repo = 'MunifTanjim/nui.nvim'
[[plugins]]
repo = 'rcarriga/nvim-notify'

[[plugins]]
repo = 'https://github.com/folke/noice.nvim'
hook_post_source = '''
lua <<EOF
require("noice").setup({
    routes = {
        {
          filter = { event = "msg_show", kind = "search_count" },
          opts = { skip = true },
        },
      }
    })
EOF
'''
[[plugins]]
repo = 'kristijanhusak/defx-git'

# LSP configuration
[[plugins]]
repo='williamboman/mason.nvim'
hook_add='''
lua <<EOF
require("mason").setup()
EOF
'''

[[plugins]]
repo='williamboman/mason-lspconfig.nvim'
hook_add='''
lua <<EOF
require("mason-lspconfig").setup({
    ensure_installed = { "sumneko_lua", "rust_analyzer", "pyright", "vimls", "bashls", "clangd" }
})
EOF
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
[[plugins]]
repo = 'neovim/nvim-lspconfig'
