# Ultisnip and snippet list
[[plugins]]
repo = 'Sirver/ultisnips'
hook_add = '''
" Trigger configuration. You need to change this to something else than <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
'''
[[plugins]]
repo = 'honza/vim-snippets'

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
hook_install = 'fzf#install()'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = 'call Fzf_add()'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = 'call Gitgutter_add()'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = 'call Fugitive_add()'

# indentline implementation in lua
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_sort = 0
let g:tagbar_autoclose = 0
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
nnoremap U :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'call Lightline_add()'

[[plugins]]
repo = 'jpalardy/vim-slime'
hook_add = '''
nmap <c-c><c-c> <Plug>SlimeParagraphSend
nmap <c-c><c-n> <Plug>SlimeParagraphSend}/[^\n]<CR>
nmap <c-c><c-p> <Plug>SlimeParagraphSend{?[^\n]<CR>
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_bell = 1
let g:asyncrun_open = 8
'''

[[plugins]]
repo = 'woodyZootopia/gitsession.vim'
hook_add = '''
let g:gitsession_autosave = 1
let g:gitsession_tmp_dir = g:nvim_home_directory .. '/tmp/gitsession'
'''

# [[plugins]]
# repo = 'LeafCage/vimhelpgenerator.git'

[[plugins]]
repo = 'tversteeg/registers.nvim'

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
# [[plugins]]
# repo = 'cocopon/pgmnt.vim'
# [[plugins]]
# repo = 'cocopon/inspecthi.vim'
# [[plugins]]
# repo = 'cocopon/colorswatch.vim'

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
hook_post_source = '''
let g:dps_ghosttext#ftmap['www.overleaf.com']='tex'
let g:dps_ghosttext#ftmap['localhost:8888']='python'
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
nnoremap <leader>gl <Cmd>Agit<CR>
'''
hook_post_source = '''
hi link agitStatAdded diffAdded
hi link agitStatRemoved diffRemoved
hi link agitDiffAdd diffAdded
hi link agitDiffRemove diffRemoved
'''

[[plugins]]
repo = 'voldikss/vim-floaterm.git'
hook_add = '''
let g:floaterm_width=0.9
let g:floaterm_height=0.9
nnoremap <Plug>(my-win)z <Cmd>FloatermToggle<CR>
tnoremap <silent> <C-[> <C-\><C-n>:FloatermToggle<CR>
tnoremap <silent> <C-l> <C-\><C-n>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
call defx#custom#column('indent',{'indent': "-"})

let g:defx_default_invocation = "Defx
    \ -new
    \ -auto-cd
    \ -show-ignored-files
    \ -vertical-preview
    \ -preview-width=`min([eval('&columns')-50,float2nr(eval('&columns')*0.8)])`
    \ -columns=time:size:indent:icons:space:space:git:filename
    \ -buffer-name=defx"

nnoremap <silent> <Plug>(my-win)t :exe g:defx_default_invocation expand('%:p:h') '-split=tab -columns=time:size:indent:icons:space:space:git:filename'<CR>
nnoremap <silent> <leader>d       :exe g:defx_default_invocation expand('%:p:h') '-split=no  -columns=time:size:indent:icons:space:space:git:filename'<CR>
nnoremap <silent> <leader>n       :exe g:defx_default_invocation expand('%:p:h') '-split=vertical -winwidth=30 -direction=topleft -columns=indent:icons:space:filename'<CR>

autocmd FileType defx call s:defx_my_settings()
function!  s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>          defx#async_action('open')
    nnoremap <silent><buffer><expr> o             defx#is_directory()?defx#async_action('open_or_close_tree'):defx#async_action('drop')
    nnoremap <silent><buffer><expr> O             defx#is_directory()?defx#async_action('open_tree_recursive'):defx#async_action('drop','tabnew')
    nnoremap <silent><buffer><expr> <2-LeftMouse> defx#call_async_action('open')
    nnoremap <silent><buffer><expr> l             defx#call_async_action('open_directory')
    nnoremap <silent><buffer><expr> K             defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> L             defx#do_action('new_file')
    nnoremap <silent><buffer><expr> a             defx#do_action('new_file')
    nnoremap <silent><buffer><expr> h             defx#call_async_action('cd', ['..'])
    nnoremap <silent><buffer><expr> d             defx#do_action('remove_trash',[v:true])
    nnoremap <silent><buffer><expr> D             defx#do_action('remove')
    nnoremap <silent><buffer><expr> r             defx#do_action('rename',['..'])
    nnoremap <silent><buffer><expr> ~             defx#call_async_action('cd')
    nnoremap <silent><buffer><expr> v             defx#do_action('toggle_select').'j'
    nnoremap <silent><buffer><expr> R             defx#do_action('redraw')
    nnoremap <silent><buffer><expr> yy            defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> !             defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> i             defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x             defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> .             defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> c             defx#do_action('copy')
    nnoremap <silent><buffer><expr> C             defx#do_action('move')
    nnoremap <silent><buffer><expr> X             defx#do_action('move')
    nnoremap <silent><buffer><expr> p             defx#do_action('preview')
    nnoremap <silent><buffer><expr> P             defx#do_action('paste')
    nnoremap <silent><buffer>       me            <Cmd>call defx#call_action('toggle_sort', 'extension')<CR><Cmd>call defx#call_action('redraw')<CR>
    nnoremap <silent><buffer>       mn            <Cmd>call defx#call_action('toggle_sort', 'filename')<CR><Cmd>call defx#call_action('redraw')<CR>
    nnoremap <silent><buffer>       ms            <Cmd>call defx#call_action('toggle_sort', 'size')<CR><Cmd>call defx#call_action('redraw')<CR>
    nnoremap <silent><buffer>       mt            <Cmd>call defx#call_action('toggle_sort', 'time')<CR><Cmd>call defx#call_action('redraw')<CR>
    nnoremap <buffer>               <leader>gd    :call                         <SID>git_diff_of_directory()<CR>
endfunction

function! s:drop_and_back()
    call defx#do_action('open')
    " exe "normal \<C-w>h"
endfunction

function! s:git_diff_of_directory()
    exe "tabnew"
    exe "read !git diff"
    exe "setf diff"
    exe "setlocal buftype=nofile"
    exe "setlocal bufhidden=hide"
    exe "setlocal noswapfile"
endfunction
'''
[[plugins]]
repo = 'kristijanhusak/defx-icons'
[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
hook_post_source = 'call Treesitter_postsource()'
hook_install = 'TSUpdate'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'https://github.com/nvim-orgmode/orgmode'
hook_post_source = '''
lua <<EOF
-- Load custom tree-sitter grammar for org filetype
require('orgmode').setup_ts_grammar()

require('orgmode').setup({
  org_agenda_files = {'~/org/*'},
  org_default_notes_file = '~/org/refile.org',
})
EOF
augroup org-mode
    autocmd FileType org nnoremap <buffer> + <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> t <Cmd>lua require("orgmode").action("org_mappings.todo_next_state")<CR>
    autocmd FileType org nnoremap <buffer> - <Cmd>lua require("orgmode").action("org_mappings.todo_prev_state")<CR>
augroup END
'''
