[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
if g:dark_colorscheme
    let g:lightline = {
                \ 'colorscheme': 'iceberg',
                \}
else
    let g:lightline = {
                \ 'colorscheme': 'iceberg',
                \}
endif
let g:lightline.subseparator = { 'left': '', 'right': '' }
'''


[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''

let g:eskk#directory = '~/.config/eskk'
let g:eskk#dictionary = {'path': '~/.config/fcitx/skk/user.dict', 'sorted': 1, 'encoding': 'utf-8'}
let g:eskk#large_dictionary = {'path': '/usr/share/skk/SKK-JISYO.L', 'sorted': 1, 'encoding': 'euc-jp'}
let g:eskk#show_annotation = 1

" let g:eskk#marker_henkan = "[変換]"
" let g:eskk#marker_henkan_select = "[選択]"
" let g:eskk#marker_okuri = "[送り]"
" let g:eskk#marker_jisyo_touroku = "[辞書]"
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {
      'lua',
      'toml',
      'tex',
      'latex',
    }
  },
  ensure_installed = 'maintained'
}
EOF
'''
hook_install = 'TSUpdate'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1

" imap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"

" Expand the completed snippet trigger by <CR>.
" trial 1
" imap <expr> <CR>
" \ (pumvisible() && neosnippet#expandable()) ?
" \ "\<Plug>(neosnippet_expand)" : "<C-r>=<SID>my_cr_function()<CR>"
"
" trial 2
inoremap <silent> <expr> <CR> "<C-r>=deoplete#close_popup()<CR><CR>"

call deoplete#custom#option({
            \'camel_case': v:true,
            \'auto_complete_delay': 0,
            \'smart_case': v:true,
            \'refresh_always': v:false,
            \'buffer_path': v:true,
            \'min_pattern_length': 1,
            \'max_list': 100,
            \})

" limit only to deoplete-zsh when in deol buffer
call deoplete#custom#option('sources', {  'zsh': ['zsh'], })
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'
